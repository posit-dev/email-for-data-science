# The whole game

<!-- 
* Preview of nice email result
* Connecting to gmail
* Writing the email content
* Sending the email
* Content: Sending a fancier email
* Configuring: subject and attachments
* Orchestration: testing email 
-->

Emailing reports is a critical but challenging task for data science.
Mainly because you have to figure out generating the email content, configuring pieces like attachments, and orchestrating it (e.g. testing, or sending on a schedule). Moreover, content can range from simple layouts to more complex ones.

In this tutorial, we'll walk through the whole game of sending email. We'll start with this simple example:

```{python}
# | code-fold: true
# | eval: false
import os
from dotenv import load_dotenv
from data_polars import sp500
import redmail

load_dotenv()
gmail_address = os.environ["GMAIL_ADDRESS"]
gmail_app_password = os.environ["GMAIL_APP_PASSWORD"]


email_subject = "Report on Cars"
email_body = sp500.head(10).style.as_raw_html(inline_css=True)

# This is here to emphasize the sender does not have to be the same as the receiver
email_receiver = gmail_address

redmail.gmail.username = gmail_address
redmail.gmail.password = gmail_app_password

redmail.gmail.send(
    subject=email_subject,
    receivers=[email_receiver],
    html=email_body,
)
```


![](./assets/whole-game-email-annotated.png){width=50% fig-align="center"}

* **Content**: writing the text of the email, including plots and tables.
* **Composing**: setting up the subject, sender, and receivers.
* **Orchestrating**: previewing, testing, and scheduling the email.

We'll also quickly review writing more advanced content layouts, and authoring email reports that involve running code with Quarto.

## A simple email

![](./assets/whole-game-email.png){width=50% fig-align="center"}

* Generate and preview
* Authenticate (may need to refer to its own authentication page in guide)
* Send

```{python}
# | code-fold: true
# | eval: false
import os
from dotenv import load_dotenv
from data_polars import sp500
import redmail

load_dotenv()
gmail_address = os.environ["GMAIL_ADDRESS"]
gmail_app_password = os.environ["GMAIL_APP_PASSWORD"]


email_subject = "Report on Cars"
email_body = sp500.head(10).style.as_raw_html(inline_css=True)

# This is here to emphasize the sender does not have to be the same as the receiver
email_receiver = gmail_address

redmail.gmail.username = gmail_address
redmail.gmail.password = gmail_app_password

redmail.gmail.send(
    subject=email_subject,
    receivers=[email_receiver],
    html=email_body,
)
```

## Configure: subject, recipients, attachments

* you could attach the data as a CSV attachment


## Orchestrate: save and preview

* previewing email
* intermediate json, easy for sending email later
* embedding images makes previewing hard
* can always email to yourself (or use a test service like Litmus)

## Content: Quarto authoring

Here's our same simple email generated using quarto.



![](./assets/whole-game-quarto.png){width=50% fig-align="center"}

* Focused on basic configuring, and content
* Sending happens via our tool
* Generate using quarto render
* Can preview email

## Content: advanced layouts

We'll highlight the key pieces (discussed later in this guide) to go from that simple email, to a more advanced on like below:

![](./assets/whole-game-fancy.png){width=50% fig-align="center"}


## Fridge

In this tutorial, we are going to send an email from a Gmail account. To do so, you will need to [create an App Password](https://support.google.com/accounts/answer/185833). Note this is only possible if you've [enabled 2-step verification](https://support.google.com/accounts/answer/185839).

<!--
I'm hestitant to directly put links like this: https://myaccount.google.com/apppasswords
Because it will instantly prompt the user to login to their gmail account, which might feel sketchy on a webpage from an unknown url.
-->

::: {.callout-tip}
This is just one of many options: it is also possible to send emails in Python from other email providers (Outlook, ProtonMail, etc.), or even from a custom domain. To skip ahead to a discussion of alternative sending methods, see [Authentication](orchestrating-auth.qmd)
:::

Once you've created your App Password, that is used as your Gmail password for sending with Python. 

There are many ways to store the password seperate from your email-sending code, so as to not expose any sensitive information. One such approach uses a `.env` file, and the ``dotenv` and `os` packages.

```{.sh filename=".env"}
GMAIL_APP_PASSWORD=abcd abcd abcd abcd
```

```{.python filename="main.py"}
import os
from dotenv import load_dotenv

load_dotenv()

your_gmail_address = "YourGmail@gmail.com"
gmail_app_password = os.environ["GMAIL_APP_PASSWORD"]
```

Check out the email content we will send.

<!-- {{< embed email-examples/summary-example.qmd#abc >}} -->


```{python}
from data_polars import sp500

sp500.head(10).style

```

And now we send the email!

```{python}
# | eval: false
import redmail

redmail.gmail.username = your_gmail_address
redmail.gmail.password = gmail_app_password

redmail.gmail.send(
    subject="An Example Email",
    receivers=[username],
    html=email_html,
    text=email_plaintext,
)
```

<!-- 
Explain why email_plaintext is there?
-->

{{< embed email-examples/summary-example.qmd#email-output >}}
