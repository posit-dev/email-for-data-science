# AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
# This file is auto-generated by scripts/generate-tags.py
# To regenerate, run: python scripts/generate-tags.py

"""MJML tag functions for all official MJML tags."""

from typing import Optional, Union

from ._core import MJMLTag, TagAttrs, TagAttrValue, TagChild


def mjml(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mjml>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mjml>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import mjml, text
    child = text("Hello World")

    result = mjml(child)
    ```
    
    With attributes:
    ```{python}
    result = mjml(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = mjml(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mjml", *args, attributes=attributes, content=content)


def head(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-head>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-head>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import head, text
    child = text("Hello World")

    result = head(child)
    ```
    
    With attributes:
    ```{python}
    result = head(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = head(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-head", *args, attributes=attributes, content=content)


def body(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-body>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-body>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import body, text
    child = text("Hello World")

    result = body(child)
    ```
    
    With attributes:
    ```{python}
    result = body(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = body(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-body", *args, attributes=attributes, content=content)


def mj_attributes(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-attributes>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-attributes>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import mj_attributes, text
    child = text("Hello World")

    result = mj_attributes(child)
    ```
    
    With attributes:
    ```{python}
    result = mj_attributes(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = mj_attributes(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-attributes", *args, attributes=attributes, content=content)


def mj_all(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-all>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-all>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import mj_all, text
    child = text("Hello World")

    result = mj_all(child)
    ```
    
    With attributes:
    ```{python}
    result = mj_all(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = mj_all(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-all", *args, attributes=attributes, content=content)


def mj_class(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-class>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-class>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import mj_class, text
    child = text("Hello World")

    result = mj_class(child)
    ```
    
    With attributes:
    ```{python}
    result = mj_class(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = mj_class(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-class", *args, attributes=attributes, content=content)


def breakpoint(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-breakpoint>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-breakpoint>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import breakpoint, text
    child = text("Hello World")

    result = breakpoint(child)
    ```
    
    With attributes:
    ```{python}
    result = breakpoint(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = breakpoint(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-breakpoint", *args, attributes=attributes, content=content)


def font(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-font>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-font>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import font, text
    child = text("Hello World")

    result = font(child)
    ```
    
    With attributes:
    ```{python}
    result = font(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = font(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-font", *args, attributes=attributes, content=content)


def html_attributes(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-html-attributes>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-html-attributes>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import html_attributes, text
    child = text("Hello World")

    result = html_attributes(child)
    ```
    
    With attributes:
    ```{python}
    result = html_attributes(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = html_attributes(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-html-attributes", *args, attributes=attributes, content=content)


def html_attribute(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-html-attribute>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-html-attribute>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import html_attribute, text
    child = text("Hello World")

    result = html_attribute(child)
    ```
    
    With attributes:
    ```{python}
    result = html_attribute(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = html_attribute(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-html-attribute", *args, attributes=attributes, content=content)


def preview(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-preview>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-preview>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import preview, text
    child = text("Hello World")

    result = preview(child)
    ```
    
    With attributes:
    ```{python}
    result = preview(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = preview(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-preview", *args, attributes=attributes, content=content)


def style(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-style>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-style>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import style, text
    child = text("Hello World")

    result = style(child)
    ```
    
    With attributes:
    ```{python}
    result = style(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = style(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-style", *args, attributes=attributes, content=content)


def accordion(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-accordion>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-accordion>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import accordion, text
    child = text("Hello World")

    result = accordion(child)
    ```
    
    With attributes:
    ```{python}
    result = accordion(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = accordion(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-accordion", *args, attributes=attributes, content=content)


def accordion_element(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-accordion-element>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-accordion-element>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import accordion_element, text
    child = text("Hello World")

    result = accordion_element(child)
    ```
    
    With attributes:
    ```{python}
    result = accordion_element(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = accordion_element(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-accordion-element", *args, attributes=attributes, content=content)


def carousel(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-carousel>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-carousel>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import carousel, text
    child = text("Hello World")

    result = carousel(child)
    ```
    
    With attributes:
    ```{python}
    result = carousel(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = carousel(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-carousel", *args, attributes=attributes, content=content)


def column(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-column>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-column>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import column, text
    child = text("Hello World")

    result = column(child)
    ```
    
    With attributes:
    ```{python}
    result = column(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = column(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-column", *args, attributes=attributes, content=content)


def divider(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-divider>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-divider>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import divider, text
    child = text("Hello World")

    result = divider(child)
    ```
    
    With attributes:
    ```{python}
    result = divider(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = divider(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-divider", *args, attributes=attributes, content=content)


def group(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-group>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-group>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import group, text
    child = text("Hello World")

    result = group(child)
    ```
    
    With attributes:
    ```{python}
    result = group(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = group(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-group", *args, attributes=attributes, content=content)


def hero(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-hero>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-hero>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import hero, text
    child = text("Hello World")

    result = hero(child)
    ```
    
    With attributes:
    ```{python}
    result = hero(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = hero(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-hero", *args, attributes=attributes, content=content)


def image(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-image>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-image>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import image, text
    child = text("Hello World")

    result = image(child)
    ```
    
    With attributes:
    ```{python}
    result = image(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = image(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-image", *args, attributes=attributes, content=content)


def navbar(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-navbar>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-navbar>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import navbar, text
    child = text("Hello World")

    result = navbar(child)
    ```
    
    With attributes:
    ```{python}
    result = navbar(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = navbar(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-navbar", *args, attributes=attributes, content=content)


def section(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-section>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-section>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import section, text
    child = text("Hello World")

    result = section(child)
    ```
    
    With attributes:
    ```{python}
    result = section(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = section(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-section", *args, attributes=attributes, content=content)


def social(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-social>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-social>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import social, text
    child = text("Hello World")

    result = social(child)
    ```
    
    With attributes:
    ```{python}
    result = social(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = social(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-social", *args, attributes=attributes, content=content)


def spacer(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-spacer>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-spacer>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import spacer, text
    child = text("Hello World")

    result = spacer(child)
    ```
    
    With attributes:
    ```{python}
    result = spacer(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = spacer(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-spacer", *args, attributes=attributes, content=content)


def wrapper(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-wrapper>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-wrapper>`
        
    Examples
    --------
    With children:
    ```{python}
    from emailer_lib.mjml import wrapper, text
    child = text("Hello World")

    result = wrapper(child)
    ```
    
    With attributes:
    ```{python}
    result = wrapper(attributes={"attr": "value"})
    ```
    
    With both:
    ```{python}
    result = wrapper(child, attributes={"background-color": "yellow"})
    ```
    """
    return MJMLTag("mj-wrapper", *args, attributes=attributes, content=content)


def accordion_text(
    content: Optional[str] = None,
    attributes: Optional[TagAttrs] = None,
):
    """
    Create an MJML `<mj-accordion-text>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    attributes
        Optional dict of tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-accordion-text>`
        
    Examples
    --------
    With content:
    ```{python}
    from emailer_lib.mjml import accordion_text

    result = accordion_text("Hello")
    ```

    With attributes and content:
    ```{python}
    result = accordion_text("Hello", attributes={"background-color": "red"})
    ```
    """
    return MJMLTag("mj-accordion-text", content, attributes=attributes, _is_leaf=True)


def accordion_title(
    content: Optional[str] = None,
    attributes: Optional[TagAttrs] = None,
):
    """
    Create an MJML `<mj-accordion-title>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    attributes
        Optional dict of tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-accordion-title>`
        
    Examples
    --------
    With content:
    ```{python}
    from emailer_lib.mjml import accordion_title

    result = accordion_title("Hello")
    ```

    With attributes and content:
    ```{python}
    result = accordion_title("Hello", attributes={"background-color": "red"})
    ```
    """
    return MJMLTag("mj-accordion-title", content, attributes=attributes, _is_leaf=True)


def button(
    content: Optional[str] = None,
    attributes: Optional[TagAttrs] = None,
):
    """
    Create an MJML `<mj-button>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    attributes
        Optional dict of tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-button>`
        
    Examples
    --------
    With content:
    ```{python}
    from emailer_lib.mjml import button

    result = button("Hello")
    ```

    With attributes and content:
    ```{python}
    result = button("Hello", attributes={"background-color": "red"})
    ```
    """
    return MJMLTag("mj-button", content, attributes=attributes, _is_leaf=True)


def carousel_image(
    content: Optional[str] = None,
    attributes: Optional[TagAttrs] = None,
):
    """
    Create an MJML `<mj-carousel-image>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    attributes
        Optional dict of tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-carousel-image>`
        
    Examples
    --------
    With content:
    ```{python}
    from emailer_lib.mjml import carousel_image

    result = carousel_image("Hello")
    ```

    With attributes and content:
    ```{python}
    result = carousel_image("Hello", attributes={"background-color": "red"})
    ```
    """
    return MJMLTag("mj-carousel-image", content, attributes=attributes, _is_leaf=True)


def navbar_link(
    content: Optional[str] = None,
    attributes: Optional[TagAttrs] = None,
):
    """
    Create an MJML `<mj-navbar-link>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    attributes
        Optional dict of tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-navbar-link>`
        
    Examples
    --------
    With content:
    ```{python}
    from emailer_lib.mjml import navbar_link

    result = navbar_link("Hello")
    ```

    With attributes and content:
    ```{python}
    result = navbar_link("Hello", attributes={"background-color": "red"})
    ```
    """
    return MJMLTag("mj-navbar-link", content, attributes=attributes, _is_leaf=True)


def raw(
    content: Optional[str] = None,
    attributes: Optional[TagAttrs] = None,
):
    """
    Create an MJML `<mj-raw>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    attributes
        Optional dict of tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-raw>`
        
    Examples
    --------
    With content:
    ```{python}
    from emailer_lib.mjml import raw

    result = raw("Hello")
    ```

    With attributes and content:
    ```{python}
    result = raw("Hello", attributes={"background-color": "red"})
    ```
    """
    return MJMLTag("mj-raw", content, attributes=attributes, _is_leaf=True)


def social_element(
    content: Optional[str] = None,
    attributes: Optional[TagAttrs] = None,
):
    """
    Create an MJML `<mj-social-element>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    attributes
        Optional dict of tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-social-element>`
        
    Examples
    --------
    With content:
    ```{python}
    from emailer_lib.mjml import social_element

    result = social_element("Hello")
    ```

    With attributes and content:
    ```{python}
    result = social_element("Hello", attributes={"background-color": "red"})
    ```
    """
    return MJMLTag("mj-social-element", content, attributes=attributes, _is_leaf=True)


def table(
    content: Optional[str] = None,
    attributes: Optional[TagAttrs] = None,
):
    """
    Create an MJML `<mj-table>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    attributes
        Optional dict of tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-table>`
        
    Examples
    --------
    With content:
    ```{python}
    from emailer_lib.mjml import table

    result = table("Hello")
    ```

    With attributes and content:
    ```{python}
    result = table("Hello", attributes={"background-color": "red"})
    ```
    """
    return MJMLTag("mj-table", content, attributes=attributes, _is_leaf=True)


def text(
    content: Optional[str] = None,
    attributes: Optional[TagAttrs] = None,
):
    """
    Create an MJML `<mj-text>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    attributes
        Optional dict of tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-text>`
        
    Examples
    --------
    With content:
    ```{python}
    from emailer_lib.mjml import text

    result = text("Hello")
    ```

    With attributes and content:
    ```{python}
    result = text("Hello", attributes={"background-color": "red"})
    ```
    """
    return MJMLTag("mj-text", content, attributes=attributes, _is_leaf=True)


def title(
    content: Optional[str] = None,
    attributes: Optional[TagAttrs] = None,
):
    """
    Create an MJML `<mj-title>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    attributes
        Optional dict of tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing `<mj-title>`
        
    Examples
    --------
    With content:
    ```{python}
    from emailer_lib.mjml import title

    result = title("Hello")
    ```

    With attributes and content:
    ```{python}
    result = title("Hello", attributes={"background-color": "red"})
    ```
    """
    return MJMLTag("mj-title", content, attributes=attributes, _is_leaf=True)
