# AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
# This file is auto-generated by scripts/generate-tags.py
# To regenerate, run: python scripts/generate-tags.py

"""MJML tag functions for all official MJML tags."""

from typing import Optional, Union

from ._core import MJMLTag, TagAttrs, TagAttrValue, TagChild


def mjml(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mjml>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mjml>
    """
    return MJMLTag("mjml", *args, content=content, **kwargs)


def head(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-head>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-head>
    """
    return MJMLTag("mj-head", *args, content=content, **kwargs)


def body(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-body>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-body>
    """
    return MJMLTag("mj-body", *args, content=content, **kwargs)


def attributes(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-attributes>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-attributes>
    """
    return MJMLTag("mj-attributes", *args, content=content, **kwargs)


def mj_all(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-all>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-all>
    """
    return MJMLTag("mj-all", *args, content=content, **kwargs)


def mj_class(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-class>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-class>
    """
    return MJMLTag("mj-class", *args, content=content, **kwargs)


def breakpoint(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-breakpoint>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-breakpoint>
    """
    return MJMLTag("mj-breakpoint", *args, content=content, **kwargs)


def font(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-font>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-font>
    """
    return MJMLTag("mj-font", *args, content=content, **kwargs)


def html_attributes(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-html-attributes>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-html-attributes>
    """
    return MJMLTag("mj-html-attributes", *args, content=content, **kwargs)


def html_attribute(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-html-attribute>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-html-attribute>
    """
    return MJMLTag("mj-html-attribute", *args, content=content, **kwargs)


def preview(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-preview>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-preview>
    """
    return MJMLTag("mj-preview", *args, content=content, **kwargs)


def style(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-style>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-style>
    """
    return MJMLTag("mj-style", *args, content=content, **kwargs)


def title(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-title>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-title>
    """
    return MJMLTag("mj-title", *args, content=content, **kwargs)


def accordion(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-accordion>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-accordion>
    """
    return MJMLTag("mj-accordion", *args, content=content, **kwargs)


def accordion_element(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-accordion-element>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-accordion-element>
    """
    return MJMLTag("mj-accordion-element", *args, content=content, **kwargs)


def carousel(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-carousel>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-carousel>
    """
    return MJMLTag("mj-carousel", *args, content=content, **kwargs)


def column(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-column>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-column>
    """
    return MJMLTag("mj-column", *args, content=content, **kwargs)


def divider(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-divider>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-divider>
    """
    return MJMLTag("mj-divider", *args, content=content, **kwargs)


def group(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-group>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-group>
    """
    return MJMLTag("mj-group", *args, content=content, **kwargs)


def hero(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-hero>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-hero>
    """
    return MJMLTag("mj-hero", *args, content=content, **kwargs)


def image(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-image>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-image>
    """
    return MJMLTag("mj-image", *args, content=content, **kwargs)


def navbar(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-navbar>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-navbar>
    """
    return MJMLTag("mj-navbar", *args, content=content, **kwargs)


def section(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-section>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-section>
    """
    return MJMLTag("mj-section", *args, content=content, **kwargs)


def social(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-social>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-social>
    """
    return MJMLTag("mj-social", *args, content=content, **kwargs)


def spacer(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-spacer>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-spacer>
    """
    return MJMLTag("mj-spacer", *args, content=content, **kwargs)


def wrapper(
    *args: Union[TagChild, TagAttrs],
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-wrapper>` tag.
    
    Parameters
    ----------
    *args
        Children or attribute dicts
    content
        Optional text content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-wrapper>
    """
    return MJMLTag("mj-wrapper", *args, content=content, **kwargs)


def accordion_text(
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-accordion-text>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-accordion-text>
    """
    return MJMLTag("mj-accordion-text", content=content, _is_leaf=True, **kwargs)


def accordion_title(
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-accordion-title>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-accordion-title>
    """
    return MJMLTag("mj-accordion-title", content=content, _is_leaf=True, **kwargs)


def button(
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-button>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-button>
    """
    return MJMLTag("mj-button", content=content, _is_leaf=True, **kwargs)


def carousel_image(
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-carousel-image>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-carousel-image>
    """
    return MJMLTag("mj-carousel-image", content=content, _is_leaf=True, **kwargs)


def navbar_link(
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-navbar-link>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-navbar-link>
    """
    return MJMLTag("mj-navbar-link", content=content, _is_leaf=True, **kwargs)


def raw(
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-raw>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-raw>
    """
    return MJMLTag("mj-raw", content=content, _is_leaf=True, **kwargs)


def social_element(
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-social-element>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-social-element>
    """
    return MJMLTag("mj-social-element", content=content, _is_leaf=True, **kwargs)


def table(
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-table>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-table>
    """
    return MJMLTag("mj-table", content=content, _is_leaf=True, **kwargs)


def text(
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-text>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-text>
    """
    return MJMLTag("mj-text", content=content, _is_leaf=True, **kwargs)


def title(
    content: Optional[str] = None,
    **kwargs: TagAttrValue,
):
    """
    Create an MJML `<mj-title>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    content
        Text or HTML content for the tag
    **kwargs
        Tag attributes
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-title>
    """
    return MJMLTag("mj-title", content=content, _is_leaf=True, **kwargs)
