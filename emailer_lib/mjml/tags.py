# AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
# This file is auto-generated by scripts/generate-tags.py
# To regenerate, run: python scripts/generate-tags.py

"""MJML tag functions for all official MJML tags."""

from typing import Optional, Union

from ._core import MJMLTag, TagAttrs, TagAttrValue, TagChild


def mjml(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mjml>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mjml>
        
    Examples
    --------
    With children:
        mjml(child1, child2)
    
    With attributes:
        mjml(attributes={"attr": "value"})
    
    With both:
        mjml(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mjml", *args, content=content)
    else:
        return MJMLTag("mjml", *args, attributes, content=content)


def head(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-head>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-head>
        
    Examples
    --------
    With children:
        head(child1, child2)
    
    With attributes:
        head(attributes={"attr": "value"})
    
    With both:
        head(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-head", *args, content=content)
    else:
        return MJMLTag("mj-head", *args, attributes, content=content)


def body(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-body>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-body>
        
    Examples
    --------
    With children:
        body(child1, child2)
    
    With attributes:
        body(attributes={"attr": "value"})
    
    With both:
        body(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-body", *args, content=content)
    else:
        return MJMLTag("mj-body", *args, attributes, content=content)


def mj_attributes(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-attributes>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-attributes>
        
    Examples
    --------
    With children:
        mj_attributes(child1, child2)
    
    With attributes:
        mj_attributes(attributes={"attr": "value"})
    
    With both:
        mj_attributes(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-attributes", *args, content=content)
    else:
        return MJMLTag("mj-attributes", *args, attributes, content=content)


def mj_all(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-all>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-all>
        
    Examples
    --------
    With children:
        mj_all(child1, child2)
    
    With attributes:
        mj_all(attributes={"attr": "value"})
    
    With both:
        mj_all(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-all", *args, content=content)
    else:
        return MJMLTag("mj-all", *args, attributes, content=content)


def mj_class(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-class>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-class>
        
    Examples
    --------
    With children:
        mj_class(child1, child2)
    
    With attributes:
        mj_class(attributes={"attr": "value"})
    
    With both:
        mj_class(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-class", *args, content=content)
    else:
        return MJMLTag("mj-class", *args, attributes, content=content)


def breakpoint(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-breakpoint>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-breakpoint>
        
    Examples
    --------
    With children:
        breakpoint(child1, child2)
    
    With attributes:
        breakpoint(attributes={"attr": "value"})
    
    With both:
        breakpoint(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-breakpoint", *args, content=content)
    else:
        return MJMLTag("mj-breakpoint", *args, attributes, content=content)


def font(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-font>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-font>
        
    Examples
    --------
    With children:
        font(child1, child2)
    
    With attributes:
        font(attributes={"attr": "value"})
    
    With both:
        font(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-font", *args, content=content)
    else:
        return MJMLTag("mj-font", *args, attributes, content=content)


def html_attributes(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-html-attributes>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-html-attributes>
        
    Examples
    --------
    With children:
        html_attributes(child1, child2)
    
    With attributes:
        html_attributes(attributes={"attr": "value"})
    
    With both:
        html_attributes(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-html-attributes", *args, content=content)
    else:
        return MJMLTag("mj-html-attributes", *args, attributes, content=content)


def html_attribute(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-html-attribute>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-html-attribute>
        
    Examples
    --------
    With children:
        html_attribute(child1, child2)
    
    With attributes:
        html_attribute(attributes={"attr": "value"})
    
    With both:
        html_attribute(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-html-attribute", *args, content=content)
    else:
        return MJMLTag("mj-html-attribute", *args, attributes, content=content)


def preview(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-preview>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-preview>
        
    Examples
    --------
    With children:
        preview(child1, child2)
    
    With attributes:
        preview(attributes={"attr": "value"})
    
    With both:
        preview(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-preview", *args, content=content)
    else:
        return MJMLTag("mj-preview", *args, attributes, content=content)


def style(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-style>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-style>
        
    Examples
    --------
    With children:
        style(child1, child2)
    
    With attributes:
        style(attributes={"attr": "value"})
    
    With both:
        style(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-style", *args, content=content)
    else:
        return MJMLTag("mj-style", *args, attributes, content=content)


def title(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-title>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-title>
        
    Examples
    --------
    With children:
        title(child1, child2)
    
    With attributes:
        title(attributes={"attr": "value"})
    
    With both:
        title(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-title", *args, content=content)
    else:
        return MJMLTag("mj-title", *args, attributes, content=content)


def accordion(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-accordion>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-accordion>
        
    Examples
    --------
    With children:
        accordion(child1, child2)
    
    With attributes:
        accordion(attributes={"attr": "value"})
    
    With both:
        accordion(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-accordion", *args, content=content)
    else:
        return MJMLTag("mj-accordion", *args, attributes, content=content)


def accordion_element(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-accordion-element>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-accordion-element>
        
    Examples
    --------
    With children:
        accordion_element(child1, child2)
    
    With attributes:
        accordion_element(attributes={"attr": "value"})
    
    With both:
        accordion_element(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-accordion-element", *args, content=content)
    else:
        return MJMLTag("mj-accordion-element", *args, attributes, content=content)


def carousel(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-carousel>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-carousel>
        
    Examples
    --------
    With children:
        carousel(child1, child2)
    
    With attributes:
        carousel(attributes={"attr": "value"})
    
    With both:
        carousel(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-carousel", *args, content=content)
    else:
        return MJMLTag("mj-carousel", *args, attributes, content=content)


def column(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-column>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-column>
        
    Examples
    --------
    With children:
        column(child1, child2)
    
    With attributes:
        column(attributes={"attr": "value"})
    
    With both:
        column(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-column", *args, content=content)
    else:
        return MJMLTag("mj-column", *args, attributes, content=content)


def divider(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-divider>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-divider>
        
    Examples
    --------
    With children:
        divider(child1, child2)
    
    With attributes:
        divider(attributes={"attr": "value"})
    
    With both:
        divider(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-divider", *args, content=content)
    else:
        return MJMLTag("mj-divider", *args, attributes, content=content)


def group(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-group>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-group>
        
    Examples
    --------
    With children:
        group(child1, child2)
    
    With attributes:
        group(attributes={"attr": "value"})
    
    With both:
        group(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-group", *args, content=content)
    else:
        return MJMLTag("mj-group", *args, attributes, content=content)


def hero(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-hero>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-hero>
        
    Examples
    --------
    With children:
        hero(child1, child2)
    
    With attributes:
        hero(attributes={"attr": "value"})
    
    With both:
        hero(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-hero", *args, content=content)
    else:
        return MJMLTag("mj-hero", *args, attributes, content=content)


def image(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-image>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-image>
        
    Examples
    --------
    With children:
        image(child1, child2)
    
    With attributes:
        image(attributes={"attr": "value"})
    
    With both:
        image(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-image", *args, content=content)
    else:
        return MJMLTag("mj-image", *args, attributes, content=content)


def navbar(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-navbar>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-navbar>
        
    Examples
    --------
    With children:
        navbar(child1, child2)
    
    With attributes:
        navbar(attributes={"attr": "value"})
    
    With both:
        navbar(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-navbar", *args, content=content)
    else:
        return MJMLTag("mj-navbar", *args, attributes, content=content)


def section(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-section>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-section>
        
    Examples
    --------
    With children:
        section(child1, child2)
    
    With attributes:
        section(attributes={"attr": "value"})
    
    With both:
        section(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-section", *args, content=content)
    else:
        return MJMLTag("mj-section", *args, attributes, content=content)


def social(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-social>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-social>
        
    Examples
    --------
    With children:
        social(child1, child2)
    
    With attributes:
        social(attributes={"attr": "value"})
    
    With both:
        social(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-social", *args, content=content)
    else:
        return MJMLTag("mj-social", *args, attributes, content=content)


def spacer(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-spacer>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-spacer>
        
    Examples
    --------
    With children:
        spacer(child1, child2)
    
    With attributes:
        spacer(attributes={"attr": "value"})
    
    With both:
        spacer(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-spacer", *args, content=content)
    else:
        return MJMLTag("mj-spacer", *args, attributes, content=content)


def wrapper(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-wrapper>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-wrapper>
        
    Examples
    --------
    With children:
        wrapper(child1, child2)
    
    With attributes:
        wrapper(attributes={"attr": "value"})
    
    With both:
        wrapper(child1, child2, attributes={"attr": "value"})
    """
    if attributes is None:
        return MJMLTag("mj-wrapper", *args, content=content)
    else:
        return MJMLTag("mj-wrapper", *args, attributes, content=content)


def accordion_text(
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-accordion-text>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    attributes
        Optional dict of tag attributes
    content
        Text or HTML content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-accordion-text>
        
    Examples
    --------
    With content:
        accordion_text(content="Hello")
    
    With attributes and content:
        accordion_text(attributes={"color": "red"}, content="Hello")
    """
    if attributes is None:
        return MJMLTag("mj-accordion-text", content=content, _is_leaf=True)
    else:
        return MJMLTag("mj-accordion-text", attributes, content=content, _is_leaf=True)


def accordion_title(
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-accordion-title>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    attributes
        Optional dict of tag attributes
    content
        Text or HTML content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-accordion-title>
        
    Examples
    --------
    With content:
        accordion_title(content="Hello")
    
    With attributes and content:
        accordion_title(attributes={"color": "red"}, content="Hello")
    """
    if attributes is None:
        return MJMLTag("mj-accordion-title", content=content, _is_leaf=True)
    else:
        return MJMLTag("mj-accordion-title", attributes, content=content, _is_leaf=True)


def button(
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-button>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    attributes
        Optional dict of tag attributes
    content
        Text or HTML content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-button>
        
    Examples
    --------
    With content:
        button(content="Hello")
    
    With attributes and content:
        button(attributes={"color": "red"}, content="Hello")
    """
    if attributes is None:
        return MJMLTag("mj-button", content=content, _is_leaf=True)
    else:
        return MJMLTag("mj-button", attributes, content=content, _is_leaf=True)


def carousel_image(
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-carousel-image>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    attributes
        Optional dict of tag attributes
    content
        Text or HTML content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-carousel-image>
        
    Examples
    --------
    With content:
        carousel_image(content="Hello")
    
    With attributes and content:
        carousel_image(attributes={"color": "red"}, content="Hello")
    """
    if attributes is None:
        return MJMLTag("mj-carousel-image", content=content, _is_leaf=True)
    else:
        return MJMLTag("mj-carousel-image", attributes, content=content, _is_leaf=True)


def navbar_link(
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-navbar-link>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    attributes
        Optional dict of tag attributes
    content
        Text or HTML content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-navbar-link>
        
    Examples
    --------
    With content:
        navbar_link(content="Hello")
    
    With attributes and content:
        navbar_link(attributes={"color": "red"}, content="Hello")
    """
    if attributes is None:
        return MJMLTag("mj-navbar-link", content=content, _is_leaf=True)
    else:
        return MJMLTag("mj-navbar-link", attributes, content=content, _is_leaf=True)


def raw(
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-raw>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    attributes
        Optional dict of tag attributes
    content
        Text or HTML content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-raw>
        
    Examples
    --------
    With content:
        raw(content="Hello")
    
    With attributes and content:
        raw(attributes={"color": "red"}, content="Hello")
    """
    if attributes is None:
        return MJMLTag("mj-raw", content=content, _is_leaf=True)
    else:
        return MJMLTag("mj-raw", attributes, content=content, _is_leaf=True)


def social_element(
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-social-element>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    attributes
        Optional dict of tag attributes
    content
        Text or HTML content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-social-element>
        
    Examples
    --------
    With content:
        social_element(content="Hello")
    
    With attributes and content:
        social_element(attributes={"color": "red"}, content="Hello")
    """
    if attributes is None:
        return MJMLTag("mj-social-element", content=content, _is_leaf=True)
    else:
        return MJMLTag("mj-social-element", attributes, content=content, _is_leaf=True)


def table(
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-table>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    attributes
        Optional dict of tag attributes
    content
        Text or HTML content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-table>
        
    Examples
    --------
    With content:
        table(content="Hello")
    
    With attributes and content:
        table(attributes={"color": "red"}, content="Hello")
    """
    if attributes is None:
        return MJMLTag("mj-table", content=content, _is_leaf=True)
    else:
        return MJMLTag("mj-table", attributes, content=content, _is_leaf=True)


def text(
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-text>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    attributes
        Optional dict of tag attributes
    content
        Text or HTML content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-text>
        
    Examples
    --------
    With content:
        text(content="Hello")
    
    With attributes and content:
        text(attributes={"color": "red"}, content="Hello")
    """
    if attributes is None:
        return MJMLTag("mj-text", content=content, _is_leaf=True)
    else:
        return MJMLTag("mj-text", attributes, content=content, _is_leaf=True)


def title(
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<mj-title>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    attributes
        Optional dict of tag attributes
    content
        Text or HTML content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <mj-title>
        
    Examples
    --------
    With content:
        title(content="Hello")
    
    With attributes and content:
        title(attributes={"color": "red"}, content="Hello")
    """
    if attributes is None:
        return MJMLTag("mj-title", content=content, _is_leaf=True)
    else:
        return MJMLTag("mj-title", attributes, content=content, _is_leaf=True)
