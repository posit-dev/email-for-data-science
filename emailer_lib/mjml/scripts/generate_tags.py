#!/usr/bin/env python3

"""
Script to auto-generate tags.py with MJML tag functions.
Run this script to regenerate tags.py from the list of MJML tags.
"""

from pathlib import Path

# List of all MJML tags (from official docs)
MJML_TAGS = [
    # Root
    "mjml",
    "mj-head",
    "mj-body",
    # Head components
    "mj-attributes",
    "mj-all",  # sub-attribute for mj-attributes
    "mj-class",  # sub-attribute for mj-attributes
    "mj-breakpoint",
    "mj-font",
    "mj-html-attributes",
    "mj-html-attribute",  # sub-attribute for mj-html-attributes
    "mj-preview",
    "mj-style",
    "mj-title",
    # Body components
    "mj-accordion",
    "mj-accordion-element",
    "mj-carousel",
    "mj-column",
    "mj-divider",
    "mj-group",
    "mj-hero",
    "mj-image",
    "mj-navbar",
    "mj-section",
    "mj-social",
    "mj-spacer",
    "mj-wrapper",
]

# Leaf/ending tags - accept content (text/HTML) but not MJML children
LEAF_TAGS = [
    "mj-accordion-text",
    "mj-accordion-title",
    "mj-button",
    "mj-carousel-image",
    "mj-navbar-link",
    "mj-raw",
    "mj-social-element",
    "mj-table",
    "mj-text",
    "mj-title"
]

# Tags that should keep the mj- prefix in the function name
KEEP_MJ_PREFIX = ["mj-attributes", "mj-all", "mj-class"]


def get_python_name(tag_name: str) -> str:
    """Convert MJML tag name to Python function name."""
    if tag_name in KEEP_MJ_PREFIX:
        # Keep mj- prefix, just replace hyphens
        return tag_name.replace("-", "_")
    else:
        # Remove mj- prefix and replace hyphens
        return tag_name.replace("-", "_").replace("mj_", "", 1)


def generate_tags_file():
    """Generate tags.py with all MJML tag functions."""

    header = '''# AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
# This file is auto-generated by scripts/generate-tags.py
# To regenerate, run: python scripts/generate-tags.py

"""MJML tag functions for all official MJML tags."""

from typing import Optional, Union

from ._core import MJMLTag, TagAttrs, TagAttrValue, TagChild

'''

    functions = []

    # Generate regular MJML tags (accept children and optional content)
    for tag_name in MJML_TAGS:
        py_name = get_python_name(tag_name)

        function_code = f'''
def {py_name}(
    *args: TagChild,
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<{tag_name}>` tag.
    
    Parameters
    ----------
    *args
        Children (MJMLTag objects)
    attributes
        Optional dict of tag attributes
    content
        Optional text content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <{tag_name}>
        
    Examples
    --------
    With children:
        {py_name}(child1, child2)
    
    With attributes:
        {py_name}(attributes={{"attr": "value"}})
    
    With both:
        {py_name}(child1, child2, attributes={{"attr": "value"}})
    """
    if attributes is None:
        return MJMLTag("{tag_name}", *args, content=content)
    else:
        return MJMLTag("{tag_name}", *args, attributes, content=content)
'''
        functions.append(function_code)

    # Generate leaf tags (accept content but not MJML children)
    for tag_name in LEAF_TAGS:
        py_name = get_python_name(tag_name)

        function_code = f'''
def {py_name}(
    attributes: Optional[TagAttrs] = None,
    content: Optional[str] = None,
):
    """
    Create an MJML `<{tag_name}>` tag.
    
    This is an ending tag that accepts text/HTML content but not MJML children.
    
    Parameters
    ----------
    attributes
        Optional dict of tag attributes
    content
        Text or HTML content for the tag
    
    Returns
    -------
    MJMLTag
        MJMLTag object representing <{tag_name}>
        
    Examples
    --------
    With content:
        {py_name}(content="Hello")
    
    With attributes and content:
        {py_name}(attributes={{"color": "red"}}, content="Hello")
    """
    if attributes is None:
        return MJMLTag("{tag_name}", content=content, _is_leaf=True)
    else:
        return MJMLTag("{tag_name}", attributes, content=content, _is_leaf=True)
'''
        functions.append(function_code)

    # Combine all parts
    output = header + "\n".join(functions)

    # Write to file - navigate from scripts/ to emailer_lib/mjml/tags.py
    script_dir = Path(__file__).parent
    tags_file = script_dir.parent / "tags.py"

    with open(tags_file, "w") as f:
        f.write(output)

    print(f"Generated {tags_file} with {len(MJML_TAGS)} container tags and {len(LEAF_TAGS)} leaf tags")


if __name__ == "__main__":
    generate_tags_file()
